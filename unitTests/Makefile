# ------------------------------------------------
# Simple Makefile to run command line arguments 
# unit tests and to generate a command line driver
#
# Author: enjalparajuli@u.boisestate.edu
# Date  : December 2017
# ------------------------------------------------

# Synopsis:
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# For more information on makefiles:
# https://www.gnu.org/software/make/manual/html_node/Introduction.html

# Points to the root of Google Test, relative to where this file is.
GTEST_DIR = ../deps/googletest/googletest

# Where to find user code, relative to where this file is.
USER_DIR = ../src
TEST_FOLDER = ../unitTests

# Different directories, relative to where this file is.
BIN = ../bin
OBJ = ../obj
LIB = ../lib

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -std=c++11 -fprofile-arcs -ftest-coverage -Wall -Wextra -pthread 
CFLAGS += -std=c++11 -fprofile-arcs -ftest-coverage -Wall -Wextra -pthread 

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list. 
TESTS = $(BIN)/UnionFindObj_unittests $(BIN)/ObfuscateObj_unittests $(BIN)/ParseObj_unittests  $(BIN)/TwitterParser_unittests $(BIN)/GeneratorObj_unittests $(BIN)/ResultsBuffer_unittests

# All Google Test headers. Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# Builds gtest.a and gtest_main.a.
# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(OBJ)/gtest-all.o : $(GTEST_SRCS)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(OBJ)/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(LIB)/gtest.a : $(OBJ)/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

$(LIB)/gtest_main.a : $(OBJ)/gtest-all.o $(OBJ)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a/all test/s.  
# A test should link with either gtest.a or gtest_main.a, 
# depending on whether it defines its own main() function.
$(BIN)/%_unittests: $(OBJ)/%_unittests.o $(OBJ)/%.o \
                    $(LIB)/gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
#For the .h files
$(BIN)/%_unittests: $(OBJ)/%_unittests.o \
                    $(LIB)/gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@

#Generate Object for the unitests files
$(OBJ)/GeneratorObj_unittests.o: $(USER_DIR)/generators/generate_modules/GeneratorObj_unittests.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^
$(OBJ)/UnionFindObj_unittests.o: $(USER_DIR)/responders/utils/UnionFindObj_unittests.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^
$(OBJ)/ObfuscateObj_unittests.o: $(USER_DIR)/generators/obfuscate_modules/ObfuscateObj_unittests.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^
$(OBJ)/ParseObj_unittests.o: $(USER_DIR)/responders/parse_modules/ParseObj_unittests.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^
$(OBJ)/TwitterParser_unittests.o: $(USER_DIR)/responders/parse_modules/twitter_parser/TwitterParser_unittests.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^
$(OBJ)/ResultsBuffer_unittests.o: $(USER_DIR)/generators/utils/ResultsBuffer_unittests.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^


#Generate Object for the source files needed for unittesting
$(OBJ)/GeneratorObj.o: $(USER_DIR)/generators/generate_modules/GeneratorObj.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^ 
$(OBJ)/UnionFindObj.o: $(USER_DIR)/responders/utils/UnionFindObj.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^ 
$(OBJ)/ObfuscateObj.o: $(USER_DIR)/generators/obfuscate_modules/ObfuscateObj.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^ 
$(OBJ)/ParseObj.o: $(USER_DIR)/responders/parse_modules/ParseObj.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^ 
$(OBJ)/TwitterParser.o: $(USER_DIR)/responders/parse_modules/twitter_parser/TwitterParser.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^
$(OBJ)/ResultsBuffer.o: $(USER_DIR)/generators/utils/ResultsBuffer.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $^ 


# A phony target is one that is not really the name of a file; rather it 
# is just a name for a recipe to be executed when you make an explicit request. 
# There are two reasons to use a phony target: to avoid a conflict with a file 
# of the same name, and to improve performance. 
.PHONY: tests
.PHONY: clean
.PHONY: directories
.PHONY: all

# Runs all tests
tests: $(TESTS)
	 $(BIN)/UnionFindObj_unittests
	 $(BIN)/ObfuscateObj_unittests 
	 $(BIN)/ParseObj_unittests 
	 $(BIN)/TwitterParser_unittests
	 $(BIN)/GeneratorObj_unittests 
	 $(BIN)/ResultsBuffer_unittests
	 
coverage: 
	lcov -t "coverageResult" -o coverage.info -c -d $(OBJ)
	lcov --extract coverage.info '*_unittests.cpp' -o coverage_filtered.info
	genhtml  -o coverageOutput coverage_filtered.info

directories:
	mkdir -p $(BIN)
	mkdir -p $(LIB)
	mkdir -p $(OBJ)

all: directories tests coverage

# Clean up when done. 
# Removes all object, library and executable files
clean: 
	rm -f $(BIN)/*
	rm -f $(OBJ)/*
	rm -f $(LIB)/*
	rm -f *.info
	rm -rf coverageOutput
	

